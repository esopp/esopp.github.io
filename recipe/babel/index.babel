//Global variable. Recipe component sets editing_id to the id of the Recipe to be edited. 
//When changes are saved, the RecipeBox component must save an updated version of the Recipe at 
//the index of the original version of the recipe in the state array this.state.recipes
var editing_id;

//RECIPEBOX: Handles a collection of recipe components
var RecipeBox = React.createClass({
  unique_id : 4,
  get_id : function () { this.unique_id++; return this.unique_id - 1; },
  getInitialState: function() {
    var stored; 
    if (typeof (Storage) !== 'undefined') {
      var str = localStorage.getItem("_esopp_recipes");
      if (str !== null) stored = JSON.parse(str);
      else stored = {  
        1 : { name: "Peanut Butter and Jelly Sandwich", ingredients: ["Bread", "Peanut Butter", "Jelly"] }, 
        2 : { name: "Bread", ingredients: ["Water", "Flour", "Yeast", "Water"] }, 
        3 : { name: "Rice", ingredients: ["Water", "Rice"] }
      };
    }
    else stored = {  
        1 : { name: "Peanut Butter and Jelly Sandwich", ingredients: ["Bread", "Peanut Butter", "Jelly"] }, 
        2 : { name: "Bread", ingredients: ["Water", "Flour", "Yeast", "Water"] }, 
        3 : { name: "Rice", ingredients: ["Water", "Rice"] }
      };
    this.unique_id = stored.length + 1;
    
    return {
      recipes: stored,
      popUps: [ {name: "Create Recipe", save: this.save, cancel: this.cancel}, {name: "Edit Recipe", save: this.edit, cancel: this.canceledit} ],
    }
  },
  /** TESTED: SUCCESS!!! **/
  save : function () {
      $("#add-recipe-button").prop("disabled", false);
  $(".recipe-button").prop("disabled", false);
    $("#create").addClass("popup-hidden"); 
    var id = this.get_id();
    var name = $("#name-create").val();
    var ingredients = $("#ingredients-create").val();
    
    if (name != null && name.trim() != "") {
    var recipe = { name: $("#name-create").val(), ingredients: $("#ingredients-create").val().split(",") };
    var arr = [];
    
    for (var i in recipe.ingredients) if (recipe.ingredients[i].trim() != "") arr.push(recipe.ingredients[i].trim());
    
    recipe.ingredients = arr;
      
    var temp = this.state.recipes;
    temp[id] = recipe;
    this.setState({recipes: temp});
      
    var to_stringify = {};
    var index = 1;
    for (var recipe in temp) {
      to_stringify[index] = temp[recipe];
      index++;
    }  
      localStorage.setItem("_esopp_recipes", JSON.stringify(to_stringify));
    }
  },
  /** tested: SUCCESS **/
  edit: function () {
  	var recipe= { name: $("#name-edit").val(), ingredients: $("#ingredients-edit").val().split(",") };
    var arr = [];
    
    for (var i in recipe.ingredients) if (recipe.ingredients[i].trim() != "") arr.push(recipe.ingredients[i].trim());
    
    recipe.ingredients = arr;
    
      $("#add-recipe-button").prop("disabled", false);
  $(".recipe-button").prop("disabled", false);
    
    $("#edit").addClass("popup-hidden");
    console.log("called edit");
    var temp = {};
    console.log("temp before edit", temp);
    for (var r in this.state.recipes) {
      if (r == editing_id)  temp[r] = recipe; 
      else temp[r] = this.state.recipes[r]; 
    }
    console.log("temp after edit", temp);
        this.setState({recipes: temp});
    
    var to_stringify = {};
    var index = 1;
    for (var recipe in temp) {
      to_stringify[index] = temp[recipe];
      index++;
    }  
      localStorage.setItem("_esopp_recipes", JSON.stringify(to_stringify));
  },
  /** tested: SUCCESS!!! **/
  cancel : function () {
    $("#create").addClass("popup-hidden"); 
      $("#add-recipe-button").prop("disabled", false);
  $(".recipe-button").prop("disabled", false);
  },
  /** tested: SUCCESS!!! **/
  canceledit : function () {
    $("#edit").addClass("popup-hidden"); 
    $("#add-recipe-button").prop("disabled", false);
  $(".recipe-button").prop("disabled", false);
  },
  /** tested: SUCCESS **/
  delete : function () {
    var temp =  this.state.recipes; 
    delete temp[editing_id];
    this.setState({recipes : temp});
    
    var to_stringify = {};
    var index = 1;
    for (var recipe in temp) {
      to_stringify[index] = temp[recipe];
      index++;
    }  
      localStorage.setItem("_esopp_recipes", JSON.stringify(to_stringify));
  },
  /** tested: SUCCESS **/
  custom_prompt: function () {
  $("#name-create").val("");
  $("#ingredients-create").val("");
  $("#add-recipe-button").prop("disabled", true);
  $(".recipe-button").prop("disabled", true);
  $("#create").removeClass("popup-hidden");
},
  render: function() {
       var recipes = [];
       var popups = [];
       for (var r in this.state.recipes) {
       		recipes.push(<Recipe id={r} name={this.state.recipes[r].name} ingredients={this.state.recipes[r].ingredients} delete={this.delete} />);
       }
       for (var p in this.state.popUps) {
         popups.push(<PopUp name={this.state.popUps[p].name} save={this.state.popUps[p].save} cancel={this.state.popUps[p].cancel} />);
       }

       return <div><div><div className="well recipe-box col-md-8 col-md-offset-2">{recipes}</div>{popups}</div><div className="add-div"><button id="add-recipe-button" className="btn" onClick={this.custom_prompt}>ADD RECIPE</button></div></div>;
  }
});



//RECIPE: A Recipe object has a List of ingredients, and can expand or collapse when clicked
//props: name: string, ingredients: ["array", "of", "strings"]
var Recipe = React.createClass({
  hidden: true,
  getInitialState: function() {
    return {
      display: 0
    };
  },
  edit: function () {
    editing_id = this.props.id;
    $("#name-edit").val(this.props.name);
    $("#ingredients-edit").val(this.props.ingredients.join(", "));
    $("#edit").removeClass("popup-hidden");
      $("#add-recipe-button").prop("disabled", true);
  $(".recipe-button").prop("disabled", true);
  },
  /** Expand or colapse the ingredients list of the recipe. **/
  hide: function() {
    if (this.hidden) {
      this.hidden = false;
      this.setState({
        display: 1
      });
    } else {
      this.hidden = true;
      
      this.setState({
        display: 0
      });
    }
  },
  /** Test to make sure the recipe is removed from the RecipeBox. May have to move this function to recipebox **/
  delete: function () {
    editing_id = this.props.id;
    this.props.delete();
  },
  render: function() {
    var buttons = [null, [<button className="recipe-button" onClick={this.edit}>Edit</button>, <button className="recipe-button" onClick={this.delete}>Delete</button>]];
    var list = [null, <List ingredients={this.props.ingredients} />];
    
    return <div id= {this.props.id} className="well recipe">
    <p onClick={this.hide} className="text-center title">{this.props.name}</p>
     {list[this.state.display]}
      {buttons[this.state.display]}</div>;
  
  }
});

//LIST: tracks and displays a list of ingredients
//props: ingredients
var List = React.createClass({
  render: function() {

    var ingredients = [];

    for (var i in this.props.ingredients) ingredients.push(<div className="well">{this.props.ingredients[i]}</div>);
    
    return <div className="well"><h4 className="text-center">Ingredients</h4> {ingredients}</div>;
  }
});


//POPUP: displays a popup window to add/edit recipes
//props: name (string)
//popup id will be #create or #edit
//make visible by removing class: .popup-hidden
//textarea input fields will have ids of #name-create or #name-edit and #ingredients-create or #ingredients-edit, respectively
var PopUp = React.createClass({
  render : function () {
    var id = this.props.name.split(" ")[0].toLowerCase();
    
    return <div id={id} className="popup popup-hidden">
      <div>
        <div className="well"><h3 className="text-center">{this.props.name}</h3></div>
        <h4 className="text-center">RECIPE</h4>
        <textarea id={"name-" + id}></textarea>
      </div>
      <div>
        <h4 className="text-center">INGREDIENTS</h4>
        <textarea id={"ingredients-" + id} placeholder="Separate ingredients with a comma."></textarea>
      </div><div className="well">
      <div className="btn-div"><button id={"save-" + id} className="btn btn-primary" onClick={this.props.save}>Save</button></div><div className="btn-div"><button id={"cancel-" + id} className="btn btn-warning" onClick={this.props.cancel}>Cancel</button></div></div>
    </div>
  }
});



//RENDER THE REACT APP
ReactDOM.render(<RecipeBox />, document.body);
